import logging

import threading
import sched, time

from ..Workers import Workers
from ..events.GpioEvent import GpioEvent
from ..events.CountdownEvent import CountdownEvent
from ..states.State import IdleState
from ..states.State import State
from ..states.State import CountdownState


class Countdown:
    def __init__(self, comm, stateMachine):

        super().__init__()
        self._comm = comm

        logging.debug("Initializing countdown...")

        self.TIMERINTERVAL = 0.2
        self.scheduler = sched.scheduler(time.time, time.sleep)

        self._timeLeft = 0
        self._timer = None

        logging.debug("Countdown initialized!")

    def timerCallback(self):
        self._timeLeft -= self.TIMERINTERVAL
        self._comm.broadcast(CountdownEvent(self._timeLeft))
        self.scheduler.enter(self.TIMERINTERVAL, 1, self.timerCallback,(self,))

        

    def run(self):
        logging.debug("Countdown: RUN!!")

        for state in self._comm.iterate(Workers.COUNTDOWN):
            self.handleState(state)

        logging.debug("Countdown: done")

        return True

    def handleState(self, state):
        if isinstance(state, CountdownState):
            if self._timer is not None:
                self._timer.cancel()
            self._timeLeft = 540 + 10  # 9 min + 10s
            self.scheduler.enter(self.TIMERINTERVAL, 1, self.timerCallback,(self,))
            self.scheduler.run(False)
        elif isinstance(state, State):
            # self.scheduler.cancel()
            pass
